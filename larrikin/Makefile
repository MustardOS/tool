SHELL := /bin/sh

SRC_DIR        ?= .
DOCS_DIR       ?= docs
SITE_DIR       ?= site
LARRIKIN       ?= ./larrikin.sh

# Larrikin flags (override on CLI, e.g. make INCLUDE_CODE=0)
INCLUDE_CODE   ?= 1
PRELUDE_LINES  ?= 3
FOOTER_BADGE   ?= 1
# DOC_MAGIC can be overridden: make DOC_MAGIC='#:]'

PANDOC         ?= pandoc
HIGHLIGHT      ?= monochrome
CSS_DIR        ?= styles
CSS_MAIN       ?= $(CSS_DIR)/larrikin.css
CSS_DARK       ?= $(CSS_DIR)/larrikin-dark.css
PANDOC_EMBED   ?= 1

# Find all .sh recursively, pruning .git, docs, site
define find_sh
find "$(SRC_DIR)" -type d \( -name .git \
  -o -name "$(notdir $(DOCS_DIR))" \
  -o -name "$(notdir $(SITE_DIR))" \) -prune \
  -o -type f -name '*.sh' -print | sort
endef

SH_SOURCES := $(shell $(find_sh))
SH_SOURCES := $(filter-out $(LARRIKIN),$(SH_SOURCES))
MD_TARGETS := $(patsubst $(SRC_DIR)/%.sh,$(DOCS_DIR)/%.md,$(SH_SOURCES))

# Inline CSS header (used when PANDOC_EMBED=1)
INLINE_CSS := $(SITE_DIR)/_inline_css.html

BOLD := $(shell tput bold 2>/dev/null || printf '')
YEL  := $(shell tput setaf 11 2>/dev/null || printf '')
BLU  := $(shell tput setaf 14 2>/dev/null || printf '')
GRN  := $(shell tput setaf 10 2>/dev/null || printf '')
RED  := $(shell tput setaf 9 2>/dev/null || printf '')
RST  := $(shell tput sgr0 2>/dev/null || printf '')
NOW  := $(shell date '+%Y-%m-%d %H:%M:%S')

.PHONY: all docs html clean list css_linked

all: banner clean docs html

banner:
	@printf '\n$(BOLD)$(YEL)  ╔════════════════════════════════╗\n'
	@printf   '  ║        Larrikin Builder        ║\n'
	@printf   '  ╚════════════════════════════════╝$(RST)\n'
	@printf '  $(BLU)Started:\t$(RST) %s\n' '$(NOW)'
	@printf '  $(BLU)Source Dir:\t$(RST) %s\n' '$(SRC_DIR)'
	@printf '  $(BLU)Embed CSS:\t$(RST) %s\n' '$(PANDOC_EMBED)'
	@printf '  $(BLU)Highlight:\t$(RST) %s\n\n' '$(HIGHLIGHT)'

list:
	@printf '%s\n' $(SH_SOURCES)

docs: $(MD_TARGETS)

$(DOCS_DIR)/%.md: $(SRC_DIR)/%.sh $(LARRIKIN)
	@mkdir -p "$(dir $@)"
	@printf "  $(GRN)Parsing:$(RST) %s -> %s\n" "$<" "$@"
	@LARRIKIN_ROOT="$(SRC_DIR)" DOC_MAGIC="$(DOC_MAGIC)" INCLUDE_CODE="$(INCLUDE_CODE)" \
	  PRELUDE_LINES="$(PRELUDE_LINES)" FOOTER_BADGE="$(FOOTER_BADGE)" \
	  "$(LARRIKIN)" "$<" > "$@"

$(DOCS_DIR)/muos_all.md: $(MD_TARGETS)
	@mkdir -p "$(DOCS_DIR)"
	@for f in $(MD_TARGETS); do \
		printf "\n---\n\n" >> "$@"; \
		cat "$$f" >> "$@"; \
	done

css_linked: $(CSS_MAIN) $(CSS_DARK) | $(SITE_DIR)
	@cp -f $(CSS_MAIN) $(SITE_DIR)/
	@cp -f $(CSS_DARK) $(SITE_DIR)/

$(SITE_DIR)/_inline_css.html: $(CSS_MAIN) $(CSS_DARK) | $(SITE_DIR)
	@{ \
	  echo "<style>"; cat $(CSS_MAIN); echo "</style>"; \
	  echo "<style>"; cat $(CSS_DARK); echo "</style>"; \
	} > "$@"

ifeq ($(PANDOC_EMBED),1)
HTML_DEPS := $(DOCS_DIR)/muos_all.md $(INLINE_CSS)
else
HTML_DEPS := $(DOCS_DIR)/muos_all.md css_linked
endif

html: $(HTML_DEPS)
	@mkdir -p "$(SITE_DIR)"
	@if command -v $(PANDOC) >/dev/null 2>&1; then \
		EMBED_OPT="--embed-resources"; \
		printf "\n<sub><em>Generated by Larrikin 0.1</em></sub>\n" >> "$(DOCS_DIR)/muos_all.md"; \
		if ! $(PANDOC) --help 2>/dev/null | grep -q -- '--embed-resources'; then EMBED_OPT="--self-contained"; fi; \
		if [ "$(PANDOC_EMBED)" = "1" ]; then \
			$(PANDOC) --standalone --toc --highlight-style=$(HIGHLIGHT) $$EMBED_OPT \
			  -M css= -H "$(SITE_DIR)/_inline_css.html" \
			  --metadata title="MustardOS Documentation" \
			  "$(DOCS_DIR)/muos_all.md" -o "$(SITE_DIR)/index.html"; \
			rm -f "$(SITE_DIR)/_inline_css.html"; \
		else \
			$(PANDOC) --standalone --toc --highlight-style=$(HIGHLIGHT) \
			  --css "$(notdir $(CSS_MAIN))" --css "$(notdir $(CSS_DARK))" \
			  --metadata title="MustardOS Documentation" \
			  "$(DOCS_DIR)/muos_all.md" -o "$(SITE_DIR)/index.html"; \
		fi; \
		printf "\n  $(GRN)Built:$(RST) %s/index.html\n\n" "$(SITE_DIR)"; \
	else \
		printf "\n  $(RED)ERROR:$(RST) pandoc not found\n  Markdown is ready in: %s\n" "$(DOCS_DIR)"; \
	fi

$(SITE_DIR):
	@mkdir -p "$@"

clean:
	@rm -rf "$(DOCS_DIR)" "$(SITE_DIR)"
